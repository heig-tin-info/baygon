import{_ as s,c as a,a as p,o as t}from"./app-B_wgLvVB.js";const e={};function i(c,n){return t(),a("div",null,[...n[0]||(n[0]=[p(`<h1 id="scripting" tabindex="-1"><a class="header-anchor" href="#scripting"><span>Scripting</span></a></h1><p>You can use Baygon as a library to write your own test runner. This is useful if you want to write your own test runner or if you want to use Baygon in a CI/CD pipeline.</p><p>Here is an example of a test runner using Baygon:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path</span>
<span class="line"><span class="token keyword">import</span> baygon</span>
<span class="line"></span>
<span class="line">ts <span class="token operator">=</span> baygon<span class="token punctuation">.</span>TestSuite<span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&#39;filters&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;uppercase&#39;</span><span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;tests&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token string">&#39;args&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;--version&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string">&#39;stderr&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&#39;contains&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;VERSION&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> executable<span class="token operator">=</span>Path<span class="token punctuation">(</span><span class="token string">&#39;myapp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">t <span class="token operator">=</span> ts<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">assert</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="validation" tabindex="-1"><a class="header-anchor" href="#validation"><span>Validation</span></a></h2><p>You can validate a Baygon configuration file with the <code>baygon.Schema</code> function:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code class="language-python"><span class="line"><span class="token keyword">import</span> baygon</span>
<span class="line"></span>
<span class="line">data <span class="token operator">=</span> baygon<span class="token punctuation">.</span>Schema<span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&#39;version&#39;</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;tests&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Test&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&#39;exit&#39;</span><span class="token punctuation">:</span> <span class="token number">0</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">assert</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">&#39;version&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)])])}const o=s(e,[["render",i]]),u=JSON.parse('{"path":"/guide/scripting.html","title":"Scripting","lang":"en-US","frontmatter":{},"git":{"updatedTime":1667915383000,"contributors":[{"name":"yves-chevallier","username":"yves-chevallier","email":"52489316+yves-chevallier@users.noreply.github.com","commits":1,"url":"https://github.com/yves-chevallier"}],"changelog":[{"hash":"5b9e3e869d47964552a7d7614bdad2d9530a9e14","time":1667915383000,"email":"52489316+yves-chevallier@users.noreply.github.com","author":"Yves Chevallier","message":"Version 1.0alpha (#23)"}]},"filePathRelative":"guide/scripting.md"}');export{o as comp,u as data};
