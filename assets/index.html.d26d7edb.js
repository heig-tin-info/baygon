import{_ as o,r as p,o as c,c as i,a as s,b as n,d as t,e}from"./app.130f045e.js";const u={},l=s("h1",{id:"introduction",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#introduction","aria-hidden":"true"},"#"),n(" Introduction")],-1),r={href:"https://en.wikipedia.org/wiki/JSON",target:"_blank",rel:"noopener noreferrer"},k={href:"https://en.wikipedia.org/wiki/YAML",target:"_blank",rel:"noopener noreferrer"},d=e(`<div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Baygon v1 is currently in <code>beta</code> stage. It&#39;s ready to be used for building functional tests, but the config and API are not stable enough, which is likely to have breaking changes between minor releases.</p></div><h2 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works" aria-hidden="true">#</a> How it works</h2><p>Baygon is a CLI tool that runs tests described in a JSON or YAML file. It can be used to test any kind of executable, including binaries, scripts, and even web applications. It&#39;s designed to be used for student assignments.</p><p>Based on the description file, a <code>TestSuite</code> is built. A <code>TestSuite</code> is a collection of <code>TestCases</code> that are executed sequentially. Each <code>TestCase</code> is a collection of <code>TestSteps</code> that are executed sequentially.</p><p>By default Baygon will run all the tests in the description file.</p><h2 id="get-started" tabindex="-1"><a class="header-anchor" href="#get-started" aria-hidden="true">#</a> Get started</h2><p>Let&#39;s say you have a C program you want to test:</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;--version&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;Version 0.1.1\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>You then need to write a test file that can be named <code>t.yaml</code>, <code>t.json</code>, <code>test.yaml</code>, <code>test.json</code>, <code>tests.yml</code> or <code>test.json</code>. Baygon is gonna find it. Inside this file you describe each individual functional test:</p><div class="language-yaml" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">1</span>
<span class="token key atrule">tests</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Arguments check
    <span class="token key atrule">tests</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> No errors if two arguments
        <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
        <span class="token key atrule">exit</span><span class="token punctuation">:</span> <span class="token number">0</span>
      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Error if less than two arguments
        <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token key atrule">exit</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Stdout is the sum of arguments
    <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
    <span class="token key atrule">stdout</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Version on stderr
    <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;--version&#39;</span><span class="token punctuation">]</span>
    <span class="token key atrule">stderr</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">regex</span><span class="token punctuation">:</span> <span class="token string">&#39;\\b\\d\\.\\d\\.\\d\\b&#39;</span>
      <span class="token punctuation">-</span> <span class="token key atrule">contains</span><span class="token punctuation">:</span> <span class="token string">&#39;Version&#39;</span>
</code></pre></div>`,10),g={href:"https://pypi.org/project/baygon/",target:"_blank",rel:"noopener noreferrer"},h=e(`<div class="language-text" data-ext="text"><pre class="language-text"><code>pip install baygon
</code></pre></div><p>Then build and test you application:</p><div class="language-text" data-ext="text"><pre class="language-text"><code>$ cc app.c -o a.out
$ baygon -v ./a.out
Test 1: Arguments check
  Test 1.1: No errors if two arguments.......... PASSED
  Test 1.2: Error if less than two arguments.... PASSED
Test 2: Stdout is the sum of arguments.......... PASSED
Test 3: Version on stderr....................... PASSED

Ran 4 tests in 0.01s.

ok.
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You may need to use <code>pip3</code> instead of <code>pip</code> depending on your system.</p></div>`,4);function m(y,f){const a=p("ExternalLinkIcon");return c(),i("div",null,[l,s("p",null,[n("Baygon is a minimalistic test framework for any types of executables. It provides a simple way of testing code with a "),s("a",r,[n("JSON"),t(a)]),n(" or a "),s("a",k,[n("YAML"),t(a)]),n(" description of tests.")]),d,s("p",null,[n("To be able to run the tests, simply install "),s("a",g,[n("Baygon"),t(a)]),n(":")]),h])}const v=o(u,[["render",m],["__file","index.html.vue"]]);export{v as default};
