import{_ as n,c as a,a as e,o as t}from"./app-DZORGJ_d.js";const p={};function i(l,s){return t(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="what-is-baygon" tabindex="-1"><a class="header-anchor" href="#what-is-baygon"><span>What is Baygon?</span></a></h1><p><strong>Baygon</strong> is a minimalistic test framework for any types of executables. It provides a simple way of testing code with a <a href="https://en.wikipedia.org/wiki/JSON" target="_blank" rel="noopener noreferrer">JSON</a> or a <a href="https://en.wikipedia.org/wiki/YAML" target="_blank" rel="noopener noreferrer">YAML</a> description of tests.</p><p>It is mainly designed for simple tests in academic environments, but it can be used for any kind of tests.</p><p>Points can be assigned to tests, group of tests or automatically distributed based on the number of tests. The total earned points can be used to calculate the final assignment grade.</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Baygon is currently in <code>beta</code> stage. It&#39;s ready to be used for building functional tests, but the config and API are not stable enough, which is likely to have breaking changes between minor releases.</p></div><h2 id="how-it-works" tabindex="-1"><a class="header-anchor" href="#how-it-works"><span>How it works</span></a></h2><p>Baygon is a CLI tool that runs tests described in a JSON or YAML file. It can be used to test any kind of executable, including binaries, scripts, and even web applications. It&#39;s designed to be used for student assignments.</p><p>Based on the description file, a <code>TestSuite</code> is built. A <code>TestSuite</code> is a collection of <code>TestCases</code> that are executed sequentially. Each <code>TestCase</code> is a collection of <code>TestSteps</code> that are executed sequentially.</p><p>By default Baygon will run all the tests in the description file.</p><h2 id="what-a-strange-name" tabindex="-1"><a class="header-anchor" href="#what-a-strange-name"><span>What a strange name!</span></a></h2><p>Baygon is a brand of insecticide popularized in the 80s by the commercial ads featuring Michel Leeb. The name was chosen because it&#39;s a simple and short name that is easy to remember. And Baygon is meant to kill bugs in your code!</p><h2 id="get-started" tabindex="-1"><a class="header-anchor" href="#get-started"><span>Get started</span></a></h2><p>Let&#39;s say you have a C program you want to test:</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span></span>
<span class="line"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;--version&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;Version 0.1.1\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You then need to write a test file that can be named <code>t.yaml</code>, <code>t.json</code>, <code>test.yaml</code>, <code>test.json</code>, <code>tests.yml</code> or <code>test.json</code>. Baygon is gonna find it. Inside this file you describe each individual functional test:</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code class="language-yaml"><span class="line"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line"><span class="token key atrule">tests</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Arguments check</span>
<span class="line">    <span class="token key atrule">tests</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> No errors if two arguments</span>
<span class="line">        <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token key atrule">exit</span><span class="token punctuation">:</span> <span class="token number">0</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Error if less than two arguments</span>
<span class="line">        <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token key atrule">exit</span><span class="token punctuation">:</span> <span class="token number">1</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Stdout is the sum of arguments</span>
<span class="line">    <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token key atrule">stdout</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Version on stderr</span>
<span class="line">    <span class="token key atrule">args</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;--version&#39;</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token key atrule">stderr</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">regex</span><span class="token punctuation">:</span> <span class="token string">&#39;\\b\\d\\.\\d\\.\\d\\b&#39;</span></span>
<span class="line">      <span class="token punctuation">-</span> <span class="token key atrule">contains</span><span class="token punctuation">:</span> <span class="token string">&#39;Version&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To be able to run the tests, simply install <a href="https://pypi.org/project/baygon/" target="_blank" rel="noopener noreferrer">Baygon</a>:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">pip install baygon</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Then build and test you application:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">$ cc app.c -o a.out</span>
<span class="line">$ baygon -v ./a.out</span>
<span class="line">Test 1: Arguments check</span>
<span class="line">  Test 1.1: No errors if two arguments.......... PASSED</span>
<span class="line">  Test 1.2: Error if less than two arguments.... PASSED</span>
<span class="line">Test 2: Stdout is the sum of arguments.......... PASSED</span>
<span class="line">Test 3: Version on stderr....................... PASSED</span>
<span class="line"></span>
<span class="line">Ran 4 tests in 0.01s.</span>
<span class="line"></span>
<span class="line">ok.</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>You may need to use <code>pip3</code> instead of <code>pip</code> depending on your system.</p></div>`,21)])])}const c=n(p,[["render",i]]),r=JSON.parse('{"path":"/guide/","title":"What is Baygon?","lang":"en-US","frontmatter":{},"git":{"updatedTime":1728487316000,"contributors":[{"name":"Yves Chevallier","username":"","email":"yves.chevallier@heig-vd.ch","commits":2},{"name":"yves-chevallier","username":"yves-chevallier","email":"52489316+yves-chevallier@users.noreply.github.com","commits":1,"url":"https://github.com/yves-chevallier"}],"changelog":[{"hash":"79b2abf3f365077098f53809af99dab37dd5e020","time":1728487316000,"email":"yves.chevallier@heig-vd.ch","author":"Yves Chevallier","message":"Update documentation"},{"hash":"5b9e3e869d47964552a7d7614bdad2d9530a9e14","time":1667915383000,"email":"52489316+yves-chevallier@users.noreply.github.com","author":"Yves Chevallier","message":"Version 1.0alpha (#23)"},{"hash":"0e844bd49e633726667b5606ce8af2a15c1e39c4","time":1603142421000,"email":"yves.chevallier@heig-vd.ch","author":"Yves Chevallier","message":"Add Docs"}]},"filePathRelative":"guide/README.md"}');export{c as comp,r as data};
